#!/bin/bash

######## For Master Node ########
hostname K8sMaster
echo "K8sMaster" > /etc/hostname
hostnamectl set-hostname K8sMaster

export AWS_ACCESS_KEY_ID=${access_key}
export AWS_SECRET_ACCESS_KEY=${private_key}
export AWS_DEFAULT_REGION=${region}

apt-get update -y

sudo resize2fs /dev/nvme0n1p1
timedatectl set-timezone Asia/Taipei

# 關閉 selinux 
# sed -i 's/enforcing/disabled/' /etc/selinux/semanage.conf
# 關閉 swap
swapoff -a  
sed -ri 's/.*swap.*/#&/' /etc/fstab

# 設定 Host (使用私有的IP ， 先不做設定)

# 下載憑證、金鑰
apt-get install apt-transport-https ca-certificates curl gnupg lsb-release software-properties-common -y
#curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg  
#echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
#apt-get update



# 安裝 containerd
# apt-get install docker-ce docker-ce-cli containerd.io -y
mkdir -p /etc/containerd
apt-get install -y containerd

containerd config default | tee /etc/containerd/config.toml
sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
sed -i 's#sandbox_image = ".*"#sandbox_image = "registry.k8s.io/pause:3.9"#' /etc/containerd/config.toml
systemctl restart containerd
systemctl enable containerd

tee /etc/crictl.yaml <<EOF
runtime-endpoint: unix:///run/containerd/containerd.sock
image-endpoint: unix:///run/containerd/containerd.sock
timeout: 10
debug: false
EOF

apt install awscli -y   

# 安裝 Kubernetes
curl -s https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main" >> ~/kubernetes.list
mv ~/kubernetes.list /etc/apt/sources.list.d
apt update
apt-get install -y kubelet kubeadm kubectl kubernetes-cni

# 把kube proxy使⽤ipvs或iptables代理
modprobe br_netfilter
# lsmod | grep br_netfilter
# sysctl net.bridge.bridge-nf-call-iptables=1
tee /etc/modules-load.d/k8s.conf <<EOF
br_netfilter
overlay
EOF



# 取得本機私有 IP、公網 IP
export ipaddr=`ip address|grep eth0|grep inet|awk -F ' ' '{print $2}' |awk -F '/' '{print $1}'`
export pubip=`dig +short myip.opendns.com @resolver1.opendns.com`


# 設定 sysctl 參數
tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF

sysctl --system

# 建立 k8s Cluster，並將輸出紀錄在 /tmp/result.out
kubeadm init --pod-network-cidr=192.168.0.0/16 --cri-socket=unix:///run/containerd/containerd.sock \
     --apiserver-cert-extra-sans=$pubip  --apiserver-advertise-address=$ipaddr > /tmp/result.out

# 取得 join command
tail -2 /tmp/result.out > /tmp/join_command.sh
aws s3 cp /tmp/join_command.sh s3://${s3buckit_name}

# 設定 kubeconfig
mkdir -p /root/.kube
cp -i /etc/kubernetes/admin.conf /root/.kube/config
cp -i /etc/kubernetes/admin.conf /tmp/admin.conf
chmod 755 /tmp/admin.conf


sysctl --system


# 安裝 Calico CNI
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.0/manifests/calico.yaml

# 等待 Calico CNI 部署完成
kubectl wait --for=condition=Ready pods -l k8s-app=calico-node -n kube-system --timeout=180s
kubectl wait --for=condition=Ready pods -l k8s-app=calico-kube-controllers -n kube-system --timeout=180s


# 可以補全指令
echo "source <(kubectl completion bash)" >> /home/ubuntu/.bashrc
echo "complete -o default -F __start_kubectl k" >> /root/.bashrc


kubectl get node

curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

kubectl apply -f https://raw.githubusercontent.com/k8snetworkplumbingwg/multus-cni/master/deployments/multus-daemonset.yml